<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverurl" elementType="Argument">
            <stringProp name="Argument.name">serverurl</stringProp>
            <stringProp name="Argument.value">${__P(serverurl,184.72.239.149)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numberOfUsers" elementType="Argument">
            <stringProp name="Argument.name">numberOfUsers</stringProp>
            <stringProp name="Argument.value">${__P(numberOfUsers,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUp" elementType="Argument">
            <stringProp name="Argument.name">rampUp</stringProp>
            <stringProp name="Argument.value">${__P(rampUp,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minWait" elementType="Argument">
            <stringProp name="Argument.name">minWait</stringProp>
            <stringProp name="Argument.value">${__P(minWait,2000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxWait" elementType="Argument">
            <stringProp name="Argument.name">maxWait</stringProp>
            <stringProp name="Argument.value">${__P(maxWait,5000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="playlistName" elementType="Argument">
            <stringProp name="Argument.name">playlistName</stringProp>
            <stringProp name="Argument.value">${__P(playlistName,playlist)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">${__P(path,/vod/mp4:BigBuckBunny_115k.mov)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bytesInBuffer" elementType="Argument">
            <stringProp name="Argument.name">bytesInBuffer</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bufferSize" elementType="Argument">
            <stringProp name="Argument.name">bufferSize</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="extinfpattern" elementType="Argument">
            <stringProp name="Argument.name">extinfpattern</stringProp>
            <stringProp name="Argument.value">#EXTINF:(.+?),\n(.+?)\.ts.*</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${serverurl}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.implementation">Java</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Cache-Control</stringProp>
            <stringProp name="Header.value">no-cache</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Host</stringProp>
            <stringProp name="Header.value">${serverurl}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Pragma</stringProp>
            <stringProp name="Header.value">no-cache</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User experience metrics" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="bufferFillTime" elementType="Argument">
            <stringProp name="Argument.name">bufferFillTime</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">Time for filling buffer with media chunks</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalDT" elementType="Argument">
            <stringProp name="Argument.name">totalDT</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">Time spent for downloading of media chunks</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalPT" elementType="Argument">
            <stringProp name="Argument.name">totalPT</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">Time required to play downloaded chunks</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalLT" elementType="Argument">
            <stringProp name="Argument.name">totalLT</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Total lag time occured during playback of a media file.</stringProp>
          </elementProp>
          <elementProp name="totalPTLT" elementType="Argument">
            <stringProp name="Argument.name">totalPTLT</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">Real time, required for the playback, including lags.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lagTimeRatio" elementType="Argument">
            <stringProp name="Argument.name">lagTimeRatio</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">Ratio of the lag time to the total playback time</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numberOfUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <longProp name="ThreadGroup.start_time">1490088485000</longProp>
        <longProp name="ThreadGroup.end_time">1490088485000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.blazemeter.jmeter.hls.logic.HlsSampler guiclass="com.blazemeter.jmeter.hls.gui.HlsSamplerGui" testclass="com.blazemeter.jmeter.hls.logic.HlsSampler" testname="HLS Sampler" enabled="true">
          <stringProp name="HLS.URL_DATA">http://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov/playlist.m3u8</stringProp>
          <stringProp name="HLS.RES_DATA"></stringProp>
          <stringProp name="HLS.SECONDS_DATA">200</stringProp>
          <boolProp name="HLS.DURATION">true</boolProp>
          <stringProp name="HLS.VIDEOTYPE">vod</stringProp>
          <stringProp name="HLS.PROTOCOL">http</stringProp>
          <stringProp name="HLS.NET_DATA"></stringProp>
          <stringProp name="HLS.RESOLUTION_TYPE">minResolution</stringProp>
          <stringProp name="HLS.BANDWIDTH_TYPE">minBandwidth</stringProp>
        </com.blazemeter.jmeter.hls.logic.HlsSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters">${bufferSize} ${extinfpattern}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
//Restoring variables	
	double bufferFillTime = Double.parseDouble(vars.get(&quot;bufferFillTime&quot;));
	double totalDT = Double.parseDouble(vars.get(&quot;totalDT&quot;));
	double totalPT = Double.parseDouble(vars.get(&quot;totalPT&quot;));
	double totalLT = Double.parseDouble(vars.get(&quot;totalLT&quot;));
	double totalPTLT = Double.parseDouble(vars.get(&quot;totalLT&quot;));
	long bytesInBuffer = Long.parseLong(vars.get(&quot;bytesInBuffer&quot;));
	double lagTimeRatio = Double.parseDouble(vars.get(&quot;lagTimeRatio&quot;));
//We use map to store chunk file with their playback duration values
	Map chunkMap = new HashMap();
	Pattern responsePattern = Pattern.compile(args[1]);
// Download time of the master playlist
	double dT = (prev.getEndTime() - prev.getStartTime());
	totalDT = dT;
	totalPT = dT;
	bufferFillTime = dT;

	long dB = 0;
	double mediaPT = 0;
	double mediaDT = 0;
	SampleResult[] sR = prev.getSubResults();

	for(sR0:sR){
//Download time of the chunk playlists
		dT = dT+(sR0.getEndTime() - sR0.getStartTime()));
		totalDT = totalDT+dT;
		bufferFillTime = bufferFillTime + dT;

		String strResponse = sR0.getResponseDataAsString();
//Parsing variant playlist to extract chunk files with duration values
		Matcher matchedString = responsePattern.matcher(strResponse);
		while(matchedString.find())
			chunkMap.put(matchedString.group(2, matchedString.group(1)));
		
		SampleResult[] sR1 = sR0.getSubResults();

		for(sR2:sR1){
			dB = sR2.getBytesAsLong();
			dT = (sR2.getEndTime() - sR2.getStartTime());
			String sampleLabel = sR2.getSampleLabel();
//Getting chunk playback duration from the map, by chunk name
			double chunkDuration = Double.parseDouble(chunkMap.get(sampleLabel));
			mediaPT = mediaPT + chunkDuration;
// Buffer is filled, until bytes in buffer exceeds defined value - buffer size.
			if(bytesInBuffer &lt; Long.parseLong(args[0])){
				bytesInBuffer = bytesInBuffer + dB;
				bufferFillTime = bufferFillTime + dT;
				if(totalLT &gt; 0)
					totalLT = totalLT + dT;
			}
			else{
				mediaDT = mediaDT + dT;
// If total time for download exceeds time for playback - lag occurs
				if(1000*mediaPT &lt; mediaDT){
					totalLT = totalLT + mediaDT - 1000*mediaPT;
					bytesInBuffer = 0;
					mediaPT = 0;
					mediaDT = 0;
				}
			}
//Download time - time required to download a chunk. Play time - time required for the playback of downloaded chunk, parsed from the playlist
			totalDT = totalDT + dT;
			totalPT = totalPT + chunkDuration;
		}
	}
// Total play time, including lags
	totalPTLT = 1000*totalPT + totalLT;
// Lag time ratio
	lagTimeRatio = totalLT / totalPTLT;

	vars.put(&quot;bufferFillTime&quot;,Double.toString(bufferFillTime));
	vars.put(&quot;totalPT&quot;,Double.toString(totalPT));
	vars.put(&quot;totalDT&quot;,Double.toString(totalDT));
	vars.put(&quot;totalLT&quot;,Double.toString(totalLT));
	vars.put(&quot;bytesInBuffer&quot;,Long.toString(bytesInBuffer));
	vars.put(&quot;mediaPT&quot;,Double.toString(mediaPT));
	vars.put(&quot;mediaDT&quot;,Double.toString(mediaDT));
	vars.put(&quot;lagTimeRatio&quot;,Double.toString(lagTimeRatio));
	vars.put(&quot;totalPTLT&quot;,Double.toString(totalPTLT));
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>